import itertools
from deployement.scons.itk import wrapitk_root
from deployement.scons.wrapitk import (Instantiation, 
                                       get_dimensions, get_real_types)

Import("env")
env = env.Clone()
env.Glob("*.py")
env.Use("itk")

env.PythonModule("_spectral_analysis", 
                 ["spectral_analysis.i", "spectral_analysis.cpp"], 
                 CXX="g++-4.4")

# Only wrap for real types
types = get_real_types(wrapitk_root())
dimensions = get_dimensions(wrapitk_root())

image_types = [Instantiation("itk::Image", *x) 
               for x in itertools.product(types, dimensions)]

vector_image_types = [Instantiation("itk::VectorImage", *x) 
                      for x in itertools.product(types, dimensions)]

env.WrapITKPythonModule("MediPyDiffusion", [ 
    ("itk::Tensor2ImageFileReader", 
         [(x,) for x in vector_image_types], "pointer", ["Base", "IO"]), 
    ("itk::Tensor2ImageFileWriter", 
         [(x,) for x in vector_image_types], "pointer", ["Base", "IO"]),
    ("itk::SecondOrderSymmetricTensorReconstructionFilter", 
         [(x,y) for x,y in zip(image_types, vector_image_types)], "pointer"),
    ("itk::FractionalAnisotropyImageFilter", 
         [(x,y) for x,y in zip(vector_image_types, image_types)], "pointer"),
    ("itk::MeanDiffusivityImageFilter", 
         [(x,y) for x,y in zip(vector_image_types, image_types)], "pointer"),
])
