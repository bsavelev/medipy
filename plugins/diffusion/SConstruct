import itertools
from deployement.scons.itk import wrapitk_root
from deployement.scons.wrapitk import (Instantiation, 
                                       get_dimensions, get_scalar_types)

Import('env')
env = env.Clone()
env.Glob("*.py")
env.Use("itk")

env.PythonModule("_spectral_analysis", 
                 ["spectral_analysis.i", "spectral_analysis.cpp"], 
                 CXX="g++-4.4")

# Second Order Reconstruction Filter, itk::Image<T, N> -> itk::VectorImage<T, N>    
types = get_scalar_types(wrapitk_root())
dimensions = get_dimensions(wrapitk_root())
instantiations = {
    "input" : [Instantiation("itk::Image", *x) 
               for x in itertools.product(types, dimensions)],
    "output" : [Instantiation("itk::VectorImage", *x) 
                for x in itertools.product(types, dimensions)]
}
instantiations = [(input, output) 
                  for input, output in zip(instantiations["input"], instantiations["output"])]

classes_template_info = [ ("itk::SecondOrderSymmetricTensorReconstructionFilter", instantiations, "pointer") ]
env.WrapITKPythonModule("SecondOrderSymmetricTensorReconstructionFilter", classes_template_info)

# Fractional Anisotropy Image Filter, itk::VectorImage<T, N> -> itk::Image<T, N>  
types = get_scalar_types(wrapitk_root())
dimensions = get_dimensions(wrapitk_root())
instantiations = {
    "input" : [Instantiation("itk::VectorImage", *x) 
               for x in itertools.product(types, dimensions)],
    "output" : [Instantiation("itk::Image", *x) 
                for x in itertools.product(types, dimensions)]
}
instantiations = [(input, output) 
                  for input, output in zip(instantiations["input"], instantiations["output"])]
classes_template_info = [ ("itk::FractionalAnisotropyImageFilter", instantiations, "pointer") ]
env.WrapITKPythonModule("FractionalAnisotropyImageFilter", classes_template_info)

# Mean Diffusivity Image Filter, itk::VectorImage<T, N> -> itk::Image<T, N>    
types = get_scalar_types(wrapitk_root())
dimensions = get_dimensions(wrapitk_root())
instantiations = {
    "input" : [Instantiation("itk::VectorImage", *x) 
               for x in itertools.product(types, dimensions)],
    "output" : [Instantiation("itk::Image", *x) 
                for x in itertools.product(types, dimensions)]
}
instantiations = [(input, output) 
                  for input, output in zip(instantiations["input"], instantiations["output"])]
classes_template_info = [ ("itk::MeanDiffusivityImageFilter", instantiations, "pointer") ]
env.WrapITKPythonModule("MeanDiffusivityImageFilter", classes_template_info)


